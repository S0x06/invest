// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ErrorCode int64
const (
  ErrorCode_Success ErrorCode = 0
  ErrorCode_UnknowError ErrorCode = 5000
  ErrorCode_VerifyError ErrorCode = 5001
  ErrorCode_UserIsNull ErrorCode = 5002
  ErrorCode_AddUserFail ErrorCode = 5005
  ErrorCode_UserBeKickOff ErrorCode = 5006
  ErrorCode_GoldNotEnough ErrorCode = 5007
  ErrorCode_DiamondNotEnough ErrorCode = 5009
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_Success: return "Success"
  case ErrorCode_UnknowError: return "UnknowError"
  case ErrorCode_VerifyError: return "VerifyError"
  case ErrorCode_UserIsNull: return "UserIsNull"
  case ErrorCode_AddUserFail: return "AddUserFail"
  case ErrorCode_UserBeKickOff: return "UserBeKickOff"
  case ErrorCode_GoldNotEnough: return "GoldNotEnough"
  case ErrorCode_DiamondNotEnough: return "DiamondNotEnough"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "Success": return ErrorCode_Success, nil 
  case "UnknowError": return ErrorCode_UnknowError, nil 
  case "VerifyError": return ErrorCode_VerifyError, nil 
  case "UserIsNull": return ErrorCode_UserIsNull, nil 
  case "AddUserFail": return ErrorCode_AddUserFail, nil 
  case "UserBeKickOff": return ErrorCode_UserBeKickOff, nil 
  case "GoldNotEnough": return ErrorCode_GoldNotEnough, nil 
  case "DiamondNotEnough": return ErrorCode_DiamondNotEnough, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - UserId
//  - UserName
//  - NickName
//  - AvatarAuto
//  - Gold
//  - Token
type UserInfo struct {
  UserId int64 `thrift:"userId,1" db:"userId" json:"userId"`
  UserName string `thrift:"userName,2" db:"userName" json:"userName"`
  NickName string `thrift:"nickName,3" db:"nickName" json:"nickName"`
  AvatarAuto string `thrift:"avatarAuto,4" db:"avatarAuto" json:"avatarAuto"`
  Gold int64 `thrift:"gold,5" db:"gold" json:"gold"`
  Token string `thrift:"token,6" db:"token" json:"token"`
}

func NewUserInfo() *UserInfo {
  return &UserInfo{}
}


func (p *UserInfo) GetUserId() int64 {
  return p.UserId
}

func (p *UserInfo) GetUserName() string {
  return p.UserName
}

func (p *UserInfo) GetNickName() string {
  return p.NickName
}

func (p *UserInfo) GetAvatarAuto() string {
  return p.AvatarAuto
}

func (p *UserInfo) GetGold() int64 {
  return p.Gold
}

func (p *UserInfo) GetToken() string {
  return p.Token
}
func (p *UserInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *UserInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *UserInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NickName = v
}
  return nil
}

func (p *UserInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AvatarAuto = v
}
  return nil
}

func (p *UserInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Gold = v
}
  return nil
}

func (p *UserInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *UserInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *UserInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userName: ", p), err) }
  if err := oprot.WriteString(string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userName: ", p), err) }
  return err
}

func (p *UserInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nickName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nickName: ", p), err) }
  if err := oprot.WriteString(string(p.NickName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nickName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nickName: ", p), err) }
  return err
}

func (p *UserInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avatarAuto", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:avatarAuto: ", p), err) }
  if err := oprot.WriteString(string(p.AvatarAuto)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avatarAuto (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:avatarAuto: ", p), err) }
  return err
}

func (p *UserInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gold", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:gold: ", p), err) }
  if err := oprot.WriteI64(int64(p.Gold)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gold (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:gold: ", p), err) }
  return err
}

func (p *UserInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:token: ", p), err) }
  return err
}

func (p *UserInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserInfo(%+v)", *p)
}

// Attributes:
//  - Code
//  - UserObj
type Result_ struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  UserObj *UserInfo `thrift:"user_obj,2" db:"user_obj" json:"user_obj"`
}

func NewResult_() *Result_ {
  return &Result_{}
}


func (p *Result_) GetCode() ErrorCode {
  return p.Code
}
var Result__UserObj_DEFAULT *UserInfo
func (p *Result_) GetUserObj() *UserInfo {
  if !p.IsSetUserObj() {
    return Result__UserObj_DEFAULT
  }
return p.UserObj
}
func (p *Result_) IsSetUserObj() bool {
  return p.UserObj != nil
}

func (p *Result_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Result_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *Result_)  ReadField2(iprot thrift.TProtocol) error {
  p.UserObj = &UserInfo{}
  if err := p.UserObj.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserObj), err)
  }
  return nil
}

func (p *Result_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Result_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *Result_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_obj", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_obj: ", p), err) }
  if err := p.UserObj.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserObj), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_obj: ", p), err) }
  return err
}

func (p *Result_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Result_(%+v)", *p)
}

type UserService interface {
  // Parameters:
  //  - NickName
  //  - AvatarAuto
  //  - Gold
  CreateNewUser(ctx context.Context, nickName string, avatarAuto string, gold int64) (r *Result_, err error)
  // Parameters:
  //  - UserId
  GetUserInfoById(ctx context.Context, userId int32) (r *Result_, err error)
  // Parameters:
  //  - Token
  GetUserInfoByken(ctx context.Context, token string) (r *Result_, err error)
  // Parameters:
  //  - Behavior
  //  - UserId
  //  - Gold
  ModifyGoldById(ctx context.Context, behavior string, userId int32, gold int64) (r *Result_, err error)
  // Parameters:
  //  - Behavior
  //  - Token
  //  - Gold
  ModifyGoldByToken(ctx context.Context, behavior string, token string, gold int64) (r *Result_, err error)
}

type UserServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewUserService instead
func NewUserServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserServiceClient {
  return &UserServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewUserService instead
func NewUserServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserServiceClient {
  return &UserServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewUserServiceClient(c thrift.TClient) *UserServiceClient {
  return &UserServiceClient{
    c: c,
  }
}

// Parameters:
//  - NickName
//  - AvatarAuto
//  - Gold
func (p *UserServiceClient) CreateNewUser(ctx context.Context, nickName string, avatarAuto string, gold int64) (r *Result_, err error) {
  var _args0 UserServiceCreateNewUserArgs
  _args0.NickName = nickName
  _args0.AvatarAuto = avatarAuto
  _args0.Gold = gold
  var _result1 UserServiceCreateNewUserResult
  if err = p.c.Call(ctx, "createNewUser", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - UserId
func (p *UserServiceClient) GetUserInfoById(ctx context.Context, userId int32) (r *Result_, err error) {
  var _args2 UserServiceGetUserInfoByIdArgs
  _args2.UserId = userId
  var _result3 UserServiceGetUserInfoByIdResult
  if err = p.c.Call(ctx, "getUserInfoById", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Token
func (p *UserServiceClient) GetUserInfoByken(ctx context.Context, token string) (r *Result_, err error) {
  var _args4 UserServiceGetUserInfoBykenArgs
  _args4.Token = token
  var _result5 UserServiceGetUserInfoBykenResult
  if err = p.c.Call(ctx, "getUserInfoByken", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Behavior
//  - UserId
//  - Gold
func (p *UserServiceClient) ModifyGoldById(ctx context.Context, behavior string, userId int32, gold int64) (r *Result_, err error) {
  var _args6 UserServiceModifyGoldByIdArgs
  _args6.Behavior = behavior
  _args6.UserId = userId
  _args6.Gold = gold
  var _result7 UserServiceModifyGoldByIdResult
  if err = p.c.Call(ctx, "modifyGoldById", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Behavior
//  - Token
//  - Gold
func (p *UserServiceClient) ModifyGoldByToken(ctx context.Context, behavior string, token string, gold int64) (r *Result_, err error) {
  var _args8 UserServiceModifyGoldByTokenArgs
  _args8.Behavior = behavior
  _args8.Token = token
  _args8.Gold = gold
  var _result9 UserServiceModifyGoldByTokenResult
  if err = p.c.Call(ctx, "modifyGoldByToken", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

type UserServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserService
}

func (p *UserServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserServiceProcessor(handler UserService) *UserServiceProcessor {

  self10 := &UserServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["createNewUser"] = &userServiceProcessorCreateNewUser{handler:handler}
  self10.processorMap["getUserInfoById"] = &userServiceProcessorGetUserInfoById{handler:handler}
  self10.processorMap["getUserInfoByken"] = &userServiceProcessorGetUserInfoByken{handler:handler}
  self10.processorMap["modifyGoldById"] = &userServiceProcessorModifyGoldById{handler:handler}
  self10.processorMap["modifyGoldByToken"] = &userServiceProcessorModifyGoldByToken{handler:handler}
return self10
}

func (p *UserServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x11.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x11

}

type userServiceProcessorCreateNewUser struct {
  handler UserService
}

func (p *userServiceProcessorCreateNewUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceCreateNewUserArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createNewUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceCreateNewUserResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.CreateNewUser(ctx, args.NickName, args.AvatarAuto, args.Gold); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createNewUser: " + err2.Error())
    oprot.WriteMessageBegin("createNewUser", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createNewUser", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorGetUserInfoById struct {
  handler UserService
}

func (p *userServiceProcessorGetUserInfoById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceGetUserInfoByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserInfoById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceGetUserInfoByIdResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.GetUserInfoById(ctx, args.UserId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInfoById: " + err2.Error())
    oprot.WriteMessageBegin("getUserInfoById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserInfoById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorGetUserInfoByken struct {
  handler UserService
}

func (p *userServiceProcessorGetUserInfoByken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceGetUserInfoBykenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserInfoByken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceGetUserInfoBykenResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.GetUserInfoByken(ctx, args.Token); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserInfoByken: " + err2.Error())
    oprot.WriteMessageBegin("getUserInfoByken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserInfoByken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorModifyGoldById struct {
  handler UserService
}

func (p *userServiceProcessorModifyGoldById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceModifyGoldByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("modifyGoldById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceModifyGoldByIdResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.ModifyGoldById(ctx, args.Behavior, args.UserId, args.Gold); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing modifyGoldById: " + err2.Error())
    oprot.WriteMessageBegin("modifyGoldById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("modifyGoldById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type userServiceProcessorModifyGoldByToken struct {
  handler UserService
}

func (p *userServiceProcessorModifyGoldByToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserServiceModifyGoldByTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("modifyGoldByToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserServiceModifyGoldByTokenResult{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.ModifyGoldByToken(ctx, args.Behavior, args.Token, args.Gold); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing modifyGoldByToken: " + err2.Error())
    oprot.WriteMessageBegin("modifyGoldByToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("modifyGoldByToken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - NickName
//  - AvatarAuto
//  - Gold
type UserServiceCreateNewUserArgs struct {
  NickName string `thrift:"nickName,1" db:"nickName" json:"nickName"`
  AvatarAuto string `thrift:"avatarAuto,2" db:"avatarAuto" json:"avatarAuto"`
  Gold int64 `thrift:"gold,3" db:"gold" json:"gold"`
}

func NewUserServiceCreateNewUserArgs() *UserServiceCreateNewUserArgs {
  return &UserServiceCreateNewUserArgs{}
}


func (p *UserServiceCreateNewUserArgs) GetNickName() string {
  return p.NickName
}

func (p *UserServiceCreateNewUserArgs) GetAvatarAuto() string {
  return p.AvatarAuto
}

func (p *UserServiceCreateNewUserArgs) GetGold() int64 {
  return p.Gold
}
func (p *UserServiceCreateNewUserArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceCreateNewUserArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NickName = v
}
  return nil
}

func (p *UserServiceCreateNewUserArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AvatarAuto = v
}
  return nil
}

func (p *UserServiceCreateNewUserArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Gold = v
}
  return nil
}

func (p *UserServiceCreateNewUserArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createNewUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceCreateNewUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nickName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nickName: ", p), err) }
  if err := oprot.WriteString(string(p.NickName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nickName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nickName: ", p), err) }
  return err
}

func (p *UserServiceCreateNewUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avatarAuto", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:avatarAuto: ", p), err) }
  if err := oprot.WriteString(string(p.AvatarAuto)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avatarAuto (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:avatarAuto: ", p), err) }
  return err
}

func (p *UserServiceCreateNewUserArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gold", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gold: ", p), err) }
  if err := oprot.WriteI64(int64(p.Gold)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gold (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gold: ", p), err) }
  return err
}

func (p *UserServiceCreateNewUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceCreateNewUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceCreateNewUserResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceCreateNewUserResult() *UserServiceCreateNewUserResult {
  return &UserServiceCreateNewUserResult{}
}

var UserServiceCreateNewUserResult_Success_DEFAULT *Result_
func (p *UserServiceCreateNewUserResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return UserServiceCreateNewUserResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserServiceCreateNewUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceCreateNewUserResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceCreateNewUserResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceCreateNewUserResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createNewUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceCreateNewUserResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceCreateNewUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceCreateNewUserResult(%+v)", *p)
}

// Attributes:
//  - UserId
type UserServiceGetUserInfoByIdArgs struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
}

func NewUserServiceGetUserInfoByIdArgs() *UserServiceGetUserInfoByIdArgs {
  return &UserServiceGetUserInfoByIdArgs{}
}


func (p *UserServiceGetUserInfoByIdArgs) GetUserId() int32 {
  return p.UserId
}
func (p *UserServiceGetUserInfoByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserInfoByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *UserServiceGetUserInfoByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserInfoById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserInfoByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *UserServiceGetUserInfoByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserInfoByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceGetUserInfoByIdResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceGetUserInfoByIdResult() *UserServiceGetUserInfoByIdResult {
  return &UserServiceGetUserInfoByIdResult{}
}

var UserServiceGetUserInfoByIdResult_Success_DEFAULT *Result_
func (p *UserServiceGetUserInfoByIdResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return UserServiceGetUserInfoByIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserServiceGetUserInfoByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceGetUserInfoByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserInfoByIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceGetUserInfoByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserInfoById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserInfoByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceGetUserInfoByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserInfoByIdResult(%+v)", *p)
}

// Attributes:
//  - Token
type UserServiceGetUserInfoBykenArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
}

func NewUserServiceGetUserInfoBykenArgs() *UserServiceGetUserInfoBykenArgs {
  return &UserServiceGetUserInfoBykenArgs{}
}


func (p *UserServiceGetUserInfoBykenArgs) GetToken() string {
  return p.Token
}
func (p *UserServiceGetUserInfoBykenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserInfoBykenArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *UserServiceGetUserInfoBykenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserInfoByken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserInfoBykenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *UserServiceGetUserInfoBykenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserInfoBykenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceGetUserInfoBykenResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceGetUserInfoBykenResult() *UserServiceGetUserInfoBykenResult {
  return &UserServiceGetUserInfoBykenResult{}
}

var UserServiceGetUserInfoBykenResult_Success_DEFAULT *Result_
func (p *UserServiceGetUserInfoBykenResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return UserServiceGetUserInfoBykenResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserServiceGetUserInfoBykenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceGetUserInfoBykenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceGetUserInfoBykenResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceGetUserInfoBykenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserInfoByken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceGetUserInfoBykenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceGetUserInfoBykenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceGetUserInfoBykenResult(%+v)", *p)
}

// Attributes:
//  - Behavior
//  - UserId
//  - Gold
type UserServiceModifyGoldByIdArgs struct {
  Behavior string `thrift:"behavior,1" db:"behavior" json:"behavior"`
  UserId int32 `thrift:"userId,2" db:"userId" json:"userId"`
  Gold int64 `thrift:"gold,3" db:"gold" json:"gold"`
}

func NewUserServiceModifyGoldByIdArgs() *UserServiceModifyGoldByIdArgs {
  return &UserServiceModifyGoldByIdArgs{}
}


func (p *UserServiceModifyGoldByIdArgs) GetBehavior() string {
  return p.Behavior
}

func (p *UserServiceModifyGoldByIdArgs) GetUserId() int32 {
  return p.UserId
}

func (p *UserServiceModifyGoldByIdArgs) GetGold() int64 {
  return p.Gold
}
func (p *UserServiceModifyGoldByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceModifyGoldByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Behavior = v
}
  return nil
}

func (p *UserServiceModifyGoldByIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *UserServiceModifyGoldByIdArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Gold = v
}
  return nil
}

func (p *UserServiceModifyGoldByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modifyGoldById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceModifyGoldByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("behavior", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:behavior: ", p), err) }
  if err := oprot.WriteString(string(p.Behavior)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.behavior (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:behavior: ", p), err) }
  return err
}

func (p *UserServiceModifyGoldByIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err) }
  return err
}

func (p *UserServiceModifyGoldByIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gold", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gold: ", p), err) }
  if err := oprot.WriteI64(int64(p.Gold)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gold (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gold: ", p), err) }
  return err
}

func (p *UserServiceModifyGoldByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceModifyGoldByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceModifyGoldByIdResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceModifyGoldByIdResult() *UserServiceModifyGoldByIdResult {
  return &UserServiceModifyGoldByIdResult{}
}

var UserServiceModifyGoldByIdResult_Success_DEFAULT *Result_
func (p *UserServiceModifyGoldByIdResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return UserServiceModifyGoldByIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserServiceModifyGoldByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceModifyGoldByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceModifyGoldByIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceModifyGoldByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modifyGoldById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceModifyGoldByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceModifyGoldByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceModifyGoldByIdResult(%+v)", *p)
}

// Attributes:
//  - Behavior
//  - Token
//  - Gold
type UserServiceModifyGoldByTokenArgs struct {
  Behavior string `thrift:"behavior,1" db:"behavior" json:"behavior"`
  Token string `thrift:"token,2" db:"token" json:"token"`
  Gold int64 `thrift:"gold,3" db:"gold" json:"gold"`
}

func NewUserServiceModifyGoldByTokenArgs() *UserServiceModifyGoldByTokenArgs {
  return &UserServiceModifyGoldByTokenArgs{}
}


func (p *UserServiceModifyGoldByTokenArgs) GetBehavior() string {
  return p.Behavior
}

func (p *UserServiceModifyGoldByTokenArgs) GetToken() string {
  return p.Token
}

func (p *UserServiceModifyGoldByTokenArgs) GetGold() int64 {
  return p.Gold
}
func (p *UserServiceModifyGoldByTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceModifyGoldByTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Behavior = v
}
  return nil
}

func (p *UserServiceModifyGoldByTokenArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *UserServiceModifyGoldByTokenArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Gold = v
}
  return nil
}

func (p *UserServiceModifyGoldByTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modifyGoldByToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceModifyGoldByTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("behavior", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:behavior: ", p), err) }
  if err := oprot.WriteString(string(p.Behavior)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.behavior (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:behavior: ", p), err) }
  return err
}

func (p *UserServiceModifyGoldByTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *UserServiceModifyGoldByTokenArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gold", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gold: ", p), err) }
  if err := oprot.WriteI64(int64(p.Gold)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gold (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gold: ", p), err) }
  return err
}

func (p *UserServiceModifyGoldByTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceModifyGoldByTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserServiceModifyGoldByTokenResult struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserServiceModifyGoldByTokenResult() *UserServiceModifyGoldByTokenResult {
  return &UserServiceModifyGoldByTokenResult{}
}

var UserServiceModifyGoldByTokenResult_Success_DEFAULT *Result_
func (p *UserServiceModifyGoldByTokenResult) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return UserServiceModifyGoldByTokenResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserServiceModifyGoldByTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserServiceModifyGoldByTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserServiceModifyGoldByTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserServiceModifyGoldByTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modifyGoldByToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserServiceModifyGoldByTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserServiceModifyGoldByTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserServiceModifyGoldByTokenResult(%+v)", *p)
}


